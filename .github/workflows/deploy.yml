# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  pull_request:
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-1 # set this to your preferred AWS region, e.g. us-west-1
  AWS_VPC_NAME: next-13-demo-vpc # set this to your Amazon VPC name
  ECR_REPOSITORY: next-13-demo # set this to your Amazon ECR repository name
  ECS_SERVICE: next-13-demo-service # set this to your Amazon ECS service name
  ECS_CLUSTER: next-13-demo # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION:
    task-definition.json # set this to the path to your Amazon ECS task definition
    # file, e.g. .aws/task-definition.json
  CONTAINER_NAME:
    next-13-demo-container # set this to the name of the container in the
    # containerDefinitions section of your task definition
  LOAD_BALANCER_NAME: next-13-demo-alb
  HOST_DOMAIN: media-platform.com
  PRD_BRANCH: main
  DEV_BRANCH: develop
  SSM_PATH: /fargate-next-13-demo
  SSM_PARAM_NPM_AUTH_TOKEN: npm_auth_token
  SSM_PARAM_SCHEMA_PATH: schema_path
  SSM_PARAM_MINI_API_KEY: mini_api_key

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure short sha
        id: short_sha
        run: echo "value=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # AWSの認証情報を設定する
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # AWS Systems Managerのパラメータストアからシークレット情報を取得する
      # 各シークレットはGITHUB_OUTPUTに書き込んで後続のステップで参照できるようにする
      - id: set-secrets
        name: Generate, mask, and output a secret
        run: |
          NPM_AUTH_TOKEN=$(aws ssm get-parameters \
            --name "${{ env.SSM_PATH }}/${{ env.SSM_PARAM_NPM_AUTH_TOKEN }}" \
            --with-decryption \
            --query "Parameters[*].Value" \
            --output text)
          echo "::add-mask::$NPM_AUTH_TOKEN"
          echo "npm_auth_token=$NPM_AUTH_TOKEN" >> "$GITHUB_OUTPUT"

          SCHEMA_PATH=$(aws ssm get-parameters \
            --name "${{ env.SSM_PATH }}/${{ env.SSM_PARAM_SCHEMA_PATH }}" \
            --query "Parameters[*].Value" \
            --output text)
          echo "schema_path=$SCHEMA_PATH" >> "$GITHUB_OUTPUT"

          MINI_API_KEY=$(aws ssm get-parameters \
            --name "${{ env.SSM_PATH }}/${{ env.SSM_PARAM_MINI_API_KEY }}" \
            --with-decryption --query "Parameters[*].Value" \
            --output text)
          echo "::add-mask::$MINI_API_KEY"
          echo "mini_api_key=$MINI_API_KEY" >> "$GITHUB_OUTPUT"

      # .npmrcに認証情報を書き込む
      - name: Configure NPM credentials
        run: |-
          echo "@mediagene:registry=https://npm.pkg.github.com/" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ steps.set-secrets.outputs.npm_auth_token }}" >> .npmrc

      # .envにAPIのエンドポイントURLとAPIキーの情報を書き込む
      - name: Configure dotenv
        run: |-
          echo "SCHEMA_PATH=${{ steps.set-secrets.outputs.schema_path }}" >> .env
          echo "MINI_API_KEY=${{ steps.set-secrets.outputs.mini_api_key }}" >> .env

      # ECRにログインする
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # DockerコンテナをビルドしてECRにプッシュする
      # コンテナイメージIDにコミットSHAをタグとして付与して一意にする
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.short_sha.outputs.value }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # task-definition.jsonを更新する
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      # Target Groupが存在するかチェックする
      # - name: Check exist Target Group
      #   id: check-exist-target-group
      #   if: ${{ github.event_name == 'pull_request' }}
      #   run: |
      #     HOST_HEADER="pr-${{ steps.short_sha.outputs.value }}-next-13-demo.${{ env.HOST_DOMAIN }}"
      #     TARGET_GROUP_NAME="${{ env.ECS_SERVICE }}-pr-${{ steps.short_sha.outputs.value }}"
      #     TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups \
      #       --names $TARGET_GROUP_NAME \
      #       --query "TargetGroups[*].TargetGroupArn" \
      #       --output text) exit_code=$?

      #     if [ $exit_code -eq 254 ]; then
      #       echo "check_exits=false" >> $GITHUB_OUTPUT
      #       echo "host_header=$HOST_HEADER" >> $GITHUB_OUTPUT
      #       echo "target_group_name=$TARGET_GROUP_NAME" >> $GITHUB_OUTPUT
      #     else
      #       echo "Target group $TARGET_GROUP_NAME is already exist."
      #     fi
      #   continue-on-error: true

      # Target Groupを作成する
      - name: Create Target Group
        id: create-target-group
        run: |
          TARGET_GROUP_NAME="${{ env.ECS_SERVICE }}-pr-${{ steps.short_sha.outputs.value }}"

          VPC_ID=$(aws ec2 describe-vpcs \
            --filters "Name=tag:Name,Values=${{ env.AWS_VPC_NAME }}" \
            --query "Vpcs[0].VpcId" \
            --output text)

          echo "target_group_arn=$(aws elbv2 create-target-group \
            --name $TARGET_GROUP_NAME \
            --protocol HTTP \
            --port 80 \
            --target-type ip \
            --vpc-id $VPC_ID \
            --query "TargetGroups[*].TargetGroupArn" \
            --output text)" >> $GITHUB_OUTPUT

      # Listener Ruleが存在するかチェックする
      # - name: Check exist ELB Listener rule
      #   id: check-exist-listener-rule
      #   if: ${{ github.event_name == 'pull_request' }}
      #   run: |
      #     LOAD_BALANCER_ARN = $(aws elbv2 describe-load-balancers \
      #       --names ${{ env.LOAD_BALANCER_NAME }} \
      #       --query 'LoadBalancers[0].LoadBalancerArn' \
      #       --output text)

      #     LISTENER_ARN = $(aws elbv2 describe-listeners \
      #       --load-balancer-arn $LOAD_BALANCER_ARN \
      #       --query "Listeners[*].ListenerArn" \
      #       --output text)

      #     HOST_HEADER="pr-${{ steps.short_sha.outputs.value }}-next-13-demo.${{ env.HOST_DOMAIN }}"
      #     LISTENER_RULE_ARN=$(aws elbv2 describe-rules \
      #       --listener-arn $LISTENER_ARN | grep -w $HOST_HEADER \
      #       --query "Rules[].RuleArn" \
      #       --output text)

      #     if [ -z "$LISTENER_RULE_ARN" ]; then
      #       echo "check_exits=false" >> $GITHUB_OUTPUT
      #       echo "host_header=$HOST_HEADER" >> $GITHUB_OUTPUT
      #     else
      #       echo "Listener rule $LISTENER_RULE_ARN is already exist."
      #     fi
      #   continue-on-error: true

      # Listener Ruleを作成する
      - name: Create Listener Rule
        id: create-listener-rule
        if: ${{ github.event_name == 'pull_request' && steps.check-exist-listener-rule.outputs.check_exits == 'false' }}
        run: |
          HOST_HEADER="pr-${{ steps.short_sha.outputs.value }}-next-13-demo.${{ env.HOST_DOMAIN }}"

          LOAD_BALANCER_ARN = $(aws elbv2 describe-load-balancers \
            --names ${{ env.LOAD_BALANCER_NAME }} \
            --query 'LoadBalancers[0].LoadBalancerArn' \
            --output text)

          LISTENER_ARN = $(aws elbv2 describe-listeners \
            --load-balancer-arn $LOAD_BALANCER_ARN \
            --query "Listeners[*].ListenerArn" \
            --output text)

          echo "listener_rule_arn=$(aws elbv2 create-rule \
            --listener-arn $LISTENER_ARN \
            --priority 50000 \
            --conditions Field=host-header,Values=$HOST_HEADER \
            --actions Type=forward,TargetGroupArn=${{ steps.create-target-group.outputs.target_group_arn }} \
            --query "Rules[].RuleArn" \
            --output text)" >> $GITHUB_OUTPUT

      # DNSレコードを追加する
      - name: Add DNS record
        id: add-dns-record
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          HOST_HEADER="pr-${{ steps.short_sha.outputs.value }}-next-13-demo.${{ env.HOST_DOMAIN }}"

          HOSTED_ZONE_ID=$(aws route53 list-hosted-zones-by-name \
            --dns-name ${{ env.HOST_DOMAIN }} \
            --query "HostedZones[0].Id" \
            --output text)

          LB_HOSTED_ZONE_ID==$(aws elbv2 describe-load-balancers \
            --names ${{ env.LOAD_BALANCER_NAME }} \
            --query 'LoadBalancers[0].CanonicalHostedZoneId' \
            --output text)

          aws route53 change-resource-record-sets \
            --hosted-zone-id $HOSTED_ZONE_ID \
            --change-batch "{
              \"Changes\": [{
                \"Action\": \"CREATE\",
                \"ResourceRecordSet\": {
                  \"Name\": \"$HOST_HEADER\",
                  \"Type\": \"A\",
                  \"AliasTarget\": {
                    \"HostedZoneId\": \"$LB_HOSTED_ZONE_ID\",
                    \"DNSName\": \"$HOST_HEADER\",
                    \"EvaluateTargetHealth\": false
                  }
                }
              }]
            }"

      # Serviceが存在するかチェックする
      - name: Check exist service
        id: check-exist-service
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          SERVICE_NAME="${{ env.ECS_SERVICE }}-pr-${{ steps.short_sha.outputs.value }}"
          echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT
        #   SERVICE_ARN=$(aws ecs describe-services \
        #     --cluster ${{ env.ECS_CLUSTER }} \
        #     --services $SERVICE_NAME \
        #     --query "services[*].serviceArn" \
        #     --output text)

        #   if [ -z "$SERVICE_ARN" ]; then
        #     echo "check_exits=false" >> $GITHUB_OUTPUT
        #     echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT
        #   else
        #     echo "Service $SERVICE_NAME is already exist."
        #   fi
        # continue-on-error: true

      # ECSにデプロイする
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ steps.check-exist-service.outputs.service_name }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
